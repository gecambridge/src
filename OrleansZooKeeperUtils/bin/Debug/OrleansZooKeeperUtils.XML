<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrleansZooKeeperUtils</name>
    </assembly>
    <members>
        <member name="T:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable">
            <summary>
            A Membership Table implementation using Apache Zookeeper 3.4.6 https://zookeeper.apache.org/doc/r3.4.6/
            </summary>
            <remarks>
            A brief overview of ZK features used: The data is represented by a tree of nodes (similar to a file system). 
            Every node is addressed by a path and can hold data as a byte array and has a version. When a node is created, 
            its version is 0. Upon updates, the version is atomically incremented. An update can also be conditional on an 
            expected current version. A transaction can hold several operations, which succeed or fail atomically.
            when creating a zookeeper client, one can set a base path where all operations are relative to.
            
            In this implementation:
            Every Orleans deployment has a node   /UniqueDeploymentId
            Every Silo's state is saved in        /UniqueDeploymentId/IP:Port@Gen
            Every Silo's IAmAlive is saved in     /UniqueDeploymentId/IP:Port@Gen/IAmAlive
            IAmAlive is saved in a separate node because its updates are unconditional.
            
            a node's ZK version is its ETag:
            the table version is the version of /UniqueDeploymentId
            the silo entry version is the version of /UniqueDeploymentId/IP:Port@Gen
            </remarks>
        </member>
        <member name="F:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.deploymentConnectionString">
            <summary>
            The deployment connection string. for eg. "192.168.1.1,192.168.1.2/DeploymentId"
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.deploymentPath">
            <summary>
            the node name for this deployment. for eg. /DeploymentId
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.rootConnectionString">
            <summary>
            The root connection string. for eg. "192.168.1.1,192.168.1.2"
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.InitializeGatewayListProvider(Orleans.Runtime.Configuration.ClientConfiguration,Orleans.Runtime.Logger)">
            <summary>
            Initializes the ZooKeeper based gateway provider
            </summary>
            <param name="config">The given client configuration.</param>
            <param name="logger">The logger to be used by this instance</param>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.InitializeMembershipTable(Orleans.Runtime.Configuration.GlobalConfiguration,System.Boolean,Orleans.Runtime.Logger)">
            <summary>
            Initializes the ZooKeeper based membership table.
            </summary>
            <param name="config">The configuration for this instance.</param>
            <param name="tryInitPath">if set to true, we'll try to create a node named "/DeploymentId"</param>
            <param name="logger">The logger to be used by this instance</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.ReadRow(Orleans.Runtime.SiloAddress)">
            <summary>
            Atomically reads the Membership Table information about a given silo.
            The returned MembershipTableData includes one MembershipEntry entry for a given silo and the 
            TableVersion for this table. The MembershipEntry and the TableVersion have to be read atomically.
            </summary>
            <param name="siloAddress">The address of the silo whose membership information needs to be read.</param>
            <returns>The membership information for a given silo: MembershipTableData consisting one MembershipEntry entry and
            TableVersion, read atomically.</returns>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.ReadAll">
            <summary>
            Atomically reads the full content of the Membership Table.
            The returned MembershipTableData includes all MembershipEntry entry for all silos in the table and the 
            TableVersion for this table. The MembershipEntries and the TableVersion have to be read atomically.
            </summary>
            <returns>The membership information for a given table: MembershipTableData consisting multiple MembershipEntry entries and
            TableVersion, all read atomically.</returns>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.InsertRow(Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Atomically tries to insert (add) a new MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) New MembershipEntry will be added to the table.
            2) The newly added MembershipEntry will also be added with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, insert of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo already exist in the table
            2) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be inserted.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the insert operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.UpdateRow(Orleans.MembershipEntry,System.String,Orleans.TableVersion)">
            <summary>
            Atomically tries to update the MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) The MembershipEntry for this silo will be updated to the new MembershipEntry (the old entry will be fully substitued by the new entry) 
            2) The eTag for the updated MembershipEntry will also be eTag with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, update of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo does not exist in the table
            2) A MembershipEntry for a given silo exist in the table but its etag in the table does not match the provided etag.
            3) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be updated.</param>
            <param name="etag">The etag  for the given MembershipEntry.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the update operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.UpdateIAmAlive(Orleans.MembershipEntry)">
            <summary>
            Updates the IAmAlive part (column) of the MembershipEntry for this silo.
            This operation should only update the IAmAlive collumn and not change other columns.
            This operation is a "dirty write" or "in place update" and is performed without etag validation. 
            With regards to eTags update:
            This operation may automatically update the eTag associated with the given silo row, but it does not have to. It can also leave the etag not changed ("dirty write").
            With regards to TableVersion:
            this operation should not change the TableVersion of the table. It should leave it untouched.
            There is no scenario where this operation could fail due to table semantical reasons. It can only fail due to network problems or table unavailability.
            </summary>
            <param name="entry">The target MembershipEntry tp update</param>
            <returns>Task representing the successful execution of this operation. </returns>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.GetGateways">
            <summary>
            Returns the list of gateways (silos) that can be used by a client to connect to Orleans cluster.
            The Uri is in the form of: "gwy.tcp://IP:port/Generation". See Utils.ToGatewayUri and Utils.ToSiloAddress for more details about Uri format.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.MaxStaleness">
            <summary>
            Specifies how often this IGatewayListProvider is refreshed, to have a bound on max staleness of its returned infomation.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.IsUpdatable">
            <summary>
            Specifies whether this IGatewayListProvider ever refreshes its returned infomation, or always returns the same gw list.
            (currently only the static config based StaticGatewayListProvider is not updatable. All others are.)
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.DeleteMembershipTableEntries(System.String)">
            <summary>
            Deletes all table entries of the given deploymentId
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.GetRow(org.apache.zookeeper.ZooKeeper,Orleans.Runtime.SiloAddress)">
            <summary>
            Reads the nodes /IP:Port@Gen and /IP:Port@Gen/IAmAlive (which together is one row)
            </summary>
            <param name="zk">The zookeeper instance used for the read</param>
            <param name="siloAddress">The silo address.</param>
        </member>
        <member name="T:Orleans.Runtime.Host.ZooKeeperBasedMembershipTable.ZooKeeperWatcher">
            <summary>
            the state of every ZooKeeper client and its push notifications are published using watchers.
            in orleans the watcher is only for debugging purposes
            </summary>
        </member>
    </members>
</doc>
