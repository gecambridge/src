<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrleansTestingHost</name>
    </assembly>
    <members>
        <member name="T:Orleans.TestingHost.AppDomainSiloHandle">
            <summary>
            Represents a handle to a silo that is deployed inside a remote AppDomain, but in the same process
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.AppDomainSiloHandle.AppDomain">
            <summary> Get or set the AppDomain used by the silo </summary>
        </member>
        <member name="P:Orleans.TestingHost.AppDomainSiloHandle.SiloHost">
            <summary>Gets or sets a reference to the silo host that is marshable by reference.</summary>
        </member>
        <member name="P:Orleans.TestingHost.AppDomainSiloHandle.IsActive">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHandle.Create(System.String,Orleans.Runtime.Silo.SiloType,Orleans.Runtime.Configuration.ClusterConfiguration,Orleans.Runtime.Configuration.NodeConfiguration,System.Collections.Generic.Dictionary{System.String,Orleans.CodeGeneration.GeneratedAssembly})">
            <summary>Creates a new silo in a remote app domain and returns a handle to it.</summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHandle.StopSilo(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHandle.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHandle.ImportGeneratedAssemblies">
            <summary>
            Imports assemblies generated by runtime code generation from the provided silo.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.AppDomainSiloHost">
            <summary>Allows programmatically hosting an Orleans silo in the curent app domain, exposing some marshable members via remoting.</summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.#ctor(System.String,Orleans.Runtime.Silo.SiloType,Orleans.Runtime.Configuration.ClusterConfiguration)">
            <summary>Creates and initializes a silo in the current app domain.</summary>
            <param name="name">Name of this silo.</param>
            <param name="siloType">Type of this silo.</param>
            <param name="config">Silo config data to be used for this silo.</param>
        </member>
        <member name="P:Orleans.TestingHost.AppDomainSiloHost.SiloAddress">
            <summary> SiloAddress for this silo. </summary>
        </member>
        <member name="P:Orleans.TestingHost.AppDomainSiloHost.TestHook">
            <summary>Gets the Silo test hook</summary>
        </member>
        <member name="T:Orleans.TestingHost.AppDomainSiloHost.CodeGeneratorOptimizer">
            <summary>Methods for optimizing the code generator.</summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.CodeGeneratorOptimizer.AddCachedAssembly(System.String,Orleans.CodeGeneration.GeneratedAssembly)">
            <summary>Adds a cached assembly to the code generator.</summary>
            <param name="targetAssemblyName">The assembly which the cached assembly was generated for.</param>
            <param name="cachedAssembly">The generated assembly.</param>
        </member>
        <member name="T:Orleans.TestingHost.AppDomainSiloHost.GeneratedAssemblies">
            <summary>Represents a collection of generated assemblies accross an application domain.</summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.GeneratedAssemblies.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Orleans.TestingHost.AppDomainSiloHost.GeneratedAssemblies"/> class.</summary>
        </member>
        <member name="P:Orleans.TestingHost.AppDomainSiloHost.GeneratedAssemblies.Assemblies">
            <summary>Gets the assemblies which were produced by code generation.</summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.GeneratedAssemblies.Add(System.String,Orleans.CodeGeneration.GeneratedAssembly)">
            <summary>Adds a new assembly to this collection.</summary>
            <param name="key">The full name of the assembly which code was generated for.</param>
            <param name="value">The raw generated assembly.</param>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.UpdateGeneratedAssemblies(Orleans.TestingHost.AppDomainSiloHost.GeneratedAssemblies)">
            <summary>
            Populates the provided <paramref name="collection"/> with the assemblies generated by this silo.
            </summary>
            <param name="collection">The collection to populate.</param>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.Start">
            <summary>Starts the silo</summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainSiloHost.Shutdown">
            <summary>Gracefully shuts down the silo</summary>
        </member>
        <member name="T:Orleans.TestingHost.AppDomainTestHooks">
            <summary>
            Test hook functions for white box testing.
            NOTE: this class has to and will be removed entirely. This requires the tests that currently rely on it, to assert using different mechanisms, such as with grains.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.AppDomainTestHooks.GetStorageProvider(System.String)">
            <summary>Find the named storage provider loaded in this silo. </summary>
        </member>
        <member name="T:Orleans.TestingHost.Extensions.TestConfigurationExtensions">
            <summary>
            Test silo configuration extensions.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Extensions.TestConfigurationExtensions.AdjustForTestEnvironment(Orleans.Runtime.Configuration.ClusterConfiguration,System.String)">
            <summary>
            This call tweaks the cluster config with settings specific to a test run.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Extensions.TestConfigurationExtensions.AdjustForTestEnvironment(Orleans.Runtime.Configuration.ClientConfiguration,System.String)">
            <summary>
            This call tweaks the client config with settings specific to a test run.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.SiloHandle">
            <summary>
            Represents a handle to a silo that is remotely deployed
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.NodeConfiguration">
            <summary> Get or set configuration of the silo </summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.Name">
            <summary> Get or set the name of the silo </summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.SiloAddress">
            <summary>Get or set the address of the silo</summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.ProxyAddress">
            <summary>Get the proxy address of the silo</summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.IsActive">
            <summary>Gets whether the remote silo is expected to be active</summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.Type">
            <summary>Gets or sets the silo type </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.StopSilo(System.Boolean)">
            <summary>Stop the remote silo</summary>
            <param name="stopGracefully">Specifies whether the silo should be stopped gracefully or abruptly.</param>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.TestHook">
            <summary>Gets the Silo test hook</summary>
        </member>
        <member name="P:Orleans.TestingHost.SiloHandle.AppDomainTestHook">
            <summary>Gets the Silo test hook that uses AppDomain remoting
            (NOTE: this will be removed really soon, and was migrated here temporarily. It does not respect the abstraction
            as this only works with AppDomains for now, but we'll be removing TestHooks with AppDomains entirely)</summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.ToString">
            <summary> A string that represents the current SiloHandle </summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Orleans.TestingHost.SiloHandle.Finalize">
            <inheritdoc />
        </member>
        <member name="T:Orleans.TestingHost.FaultInjectionStorageProvider`1">
            <summary>
            Fault injection decorator for storage providers.  This allows users to inject storage exceptions to test error handling scenarios.
            </summary>
            <typeparam name="TStorage"></typeparam>
        </member>
        <member name="P:Orleans.TestingHost.FaultInjectionStorageProvider`1.Name">
            <summary>The name of this provider instance, as given to it in the config.</summary>
        </member>
        <member name="P:Orleans.TestingHost.FaultInjectionStorageProvider`1.Log">
            <summary>Logger used by this storage provider instance.</summary>
            <returns>Reference to the Logger object used by this provider.</returns>
            <seealso cref="T:Orleans.Runtime.Logger"/>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProvider`1.#ctor">
            <summary>
            Default conststructor which creates the decorated storage provider
            </summary>
        </member>
        <member name="F:Orleans.TestingHost.FaultInjectionStorageProvider`1.DelayMillisecondsPropertyName">
            <summary>  Name of the property that controls the inserted delay. </summary>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProvider`1.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Initializes the decorated storage provider.
            </summary>
            <param name="name">Name assigned for this provider</param>
            <param name="providerRuntime">Callback for accessing system functions in the Provider Runtime</param>
            <param name="config">Configuration metadata to be used for this provider instance</param>
            <returns>Completion promise Task for the inttialization work for this provider</returns>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProvider`1.Close">
            <summary>Close function for this provider instance.</summary>
            <returns>Completion promise for the Close operation on this provider.</returns>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProvider`1.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Faults if exception is provided, otherwise calls through to  decorated storage provider.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be populated for this grain.</param>
            <returns>Completion promise for the Read operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProvider`1.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Faults if exception is provided, otherwise calls through to  decorated storage provider.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be written for this grain.</param>
            <returns>Completion promise for the Write operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProvider`1.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Faults if exception is provided, otherwise calls through to  decorated storage provider.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">Copy of last-known state data object for this grain.</param>
            <returns>Completion promise for the Delete operation on the specified grain.</returns>
        </member>
        <member name="T:Orleans.TestingHost.FaultyMemoryStorage">
            <summary>
            A memory storage provider that supports injection of storage exceptions.
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.FaultInjectionStorageProviderConfigurationExtensions">
            <summary>
            Extension methods for configuring a FaultyMemoryStorage 
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.FaultInjectionStorageProviderConfigurationExtensions.AddFaultyMemoryStorageProvider(Orleans.Runtime.Configuration.ClusterConfiguration,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a storage provider of type <see cref="T:Orleans.TestingHost.FaultyMemoryStorage"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
            <param name="numStorageGrains">The number of storage grains to use.</param>
            <param name="delayMilliseconds">A delay to add to each access, in milliseconds</param>
        </member>
        <member name="T:Orleans.TestingHost.IStorageFaultGrain">
            <summary>
            Grain that tracks storage exceptions to be injected.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.AddFaultOnRead(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain reads state from a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.AddFaultOnWrite(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain writes state to a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.AddFaultOnClear(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain clears state in a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.OnRead(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for reading.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.OnWrite(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for writing.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.IStorageFaultGrain.OnClear(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for clearing state.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.TestingHost.StorageFaultGrain">
            <summary>
            Grain that tracks storage exceptions to be injected.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnActivateAsync">
            <summary>
            This method is called at the end of the process of activating a grain.
            It is called before any messages have been dispatched to the grain.
            For grains with declared persistent state, this method is called after the State property has been populated.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.AddFaultOnRead(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain reads state from a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.AddFaultOnWrite(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain writes state to a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.AddFaultOnClear(Orleans.Runtime.GrainReference,System.Exception)">
            <summary>
            Adds a storage exception to be thrown when the referenced grain clears state in a storage provider
            </summary>
            <param name="grainReference"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnRead(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for reading.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnWrite(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for writing.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.StorageFaultGrain.OnClear(Orleans.Runtime.GrainReference)">
            <summary>
            Throws a storage exception if one has been added for the grain reference for clearing state.
            </summary>
            <param name="grainReference"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.TestingHost.LogConsistencyProviderConfiguration">
            <summary> A static class with functionality shared by various log-consistency provider tests.  </summary>
        </member>
        <member name="M:Orleans.TestingHost.LogConsistencyProviderConfiguration.ConfigureLogConsistencyProvidersForTesting(System.String,Orleans.Runtime.Configuration.ClusterConfiguration)">
            <summary>
            Initializes a bunch of different
            log consistency providers with different configuration settings.
            </summary>
            <param name="dataConnectionString">the data connection string</param>
            <param name="config">The configuration to modify</param>
        </member>
        <member name="T:Orleans.TestingHost.Utils.AsyncResultHandle">
            <summary>
            This class is for internal testing use only.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.Reset">
            <summary> Reset the current result handle </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Done">
            <summary> Get or set the Done flag </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Continue">
            <summary> Get or set the Continue flag </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Exception">
            <summary> Get or set the exception of the result handle </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.AsyncResultHandle.Result">
            <summary> Get or set the value of the result handle </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.WaitForFinished(System.TimeSpan)">
            <summary>
            </summary>
            <param name="timeout"></param>
            <returns>Returns <c>true</c> if operation completes before timeout</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.WaitForContinue(System.TimeSpan)">
            <summary>
            </summary>
            <param name="timeout"></param>
            <returns>Returns <c>true</c> if operation completes before timeout</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.AsyncResultHandle.WaitFor(System.TimeSpan,System.Func{System.Boolean})">
            <summary>
            </summary>
            <param name="timeout"></param>
            <param name="checkFlag"></param>
            <returns>Returns <c>true</c> if operation completes before timeout</returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.NoOpTestLogger">
            <summary>
            Test logger that does nothing with the logs.
            </summary>
        </member>
        <member name="F:Orleans.TestingHost.Utils.NoOpTestLogger.Instance">
            <summary>
            Singleton instance of logger
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.NoOpTestLogger.SeverityLevel">
            <summary> Logger is off. </summary>
        </member>
        <member name="P:Orleans.TestingHost.Utils.NoOpTestLogger.Name">
            <summary>
            Name of logger instance
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.GetLogger(System.String)">
            <summary>
            Find existing or create new Logger with the specified name
            </summary>
            <param name="loggerName">Name of the Logger to find or create</param>
            <returns>Logger associated with the specified name</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.Log(System.Int32,Orleans.Runtime.Severity,System.String,System.Object[],System.Exception)">
            <summary>
            Log message does nothing
            </summary>
            <param name="errorCode"></param>
            <param name="sev"></param>
            <param name="format"></param>
            <param name="args"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackDependency(System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.Boolean)">
            <summary>
            Track dependency does nothing
            </summary>
            <param name="name"></param>
            <param name="commandName"></param>
            <param name="startTime"></param>
            <param name="duration"></param>
            <param name="success"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Track event does nothing
            </summary>
            <param name="name"></param>
            <param name="properties"></param>
            <param name="metrics"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackMetric(System.String,System.Double,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Track metric does nothing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackMetric(System.String,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Track metric does nothing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.IncrementMetric(System.String)">
            <summary>
            Increment metric does nothing
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.IncrementMetric(System.String,System.Double)">
            <summary>
            Increment metric does nothing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.DecrementMetric(System.String)">
            <summary>
            Decrement metric does nothing
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.DecrementMetric(System.String,System.Double)">
            <summary>
            Decrement metric does nothing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackRequest(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Track request does nothing
            </summary>
            <param name="name"></param>
            <param name="startTime"></param>
            <param name="duration"></param>
            <param name="responseCode"></param>
            <param name="success"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Track exception does nothing
            </summary>
            <param name="exception"></param>
            <param name="properties"></param>
            <param name="metrics"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackTrace(System.String)">
            <summary>
            Track trace does nothing
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackTrace(System.String,Orleans.Runtime.Severity)">
            <summary>
            Track trace does nothing
            </summary>
            <param name="message"></param>
            <param name="severityLevel"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackTrace(System.String,Orleans.Runtime.Severity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Track trace does nothing
            </summary>
            <param name="message"></param>
            <param name="severityLevel"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Orleans.TestingHost.Utils.NoOpTestLogger.TrackTrace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Track trace does nothing
            </summary>
            <param name="message"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Orleans.TestingHost.Utils.StorageEmulator">
            <summary>
            A wrapper on Azure Storage Emulator.
            </summary>
            <remarks>It might be tricky to implement this as a <see cref="T:System.IDisposable">IDisposable</see>, isolated, autonomous instance, 
            see at <see href="http://azure.microsoft.com/en-us/documentation/articles/storage-use-emulator/">Use the Azure Storage Emulator for Development and Testing</see>
            for pointers.</remarks>
        </member>
        <member name="F:Orleans.TestingHost.Utils.StorageEmulator.storageEmulatorProcessNames">
            <summary>
            The storage emulator process name. One way to enumerate running process names is
            Get-Process | Format-Table Id, ProcessName -autosize. If there were multiple storage emulator
            processes running, they would named WASTOR~1, WASTOR~2, ... WASTOR~n.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.IsStarted">
            <summary>
            Is the storage emulator already started.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.TestingHost.Utils.StorageEmulator.Exists">
            <summary>
            Checks if the storage emulator exists, i.e. is installed.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.Help">
            <summary>
            Storage Emulator help.
            </summary>
            <returns>Storage emulator help.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.TryStart">
            <summary>
            Tries to start the storage emulator.
            </summary>
            <returns><em>TRUE</em> if the process was started sucessfully. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.Start">
            <summary>
            Starts the storage emulator if not already started.
            </summary>
            <returns><em>TRUE</em> if the process was stopped succesfully or was already started. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.Stop">
            <summary>
            Stops the storage emulator if started.
            </summary>
            <returns><em>TRUE</em> if the process was stopped succesfully or was already stopped. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.CreateProcessArguments(System.String)">
            <summary>
            Creates a new <see cref="T:System.Diagnostics.ProcessStartInfo">ProcessStartInfo</see> to be used as an argument
            to other operations in this class.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>A new <see cref="T:System.Diagnostics.ProcessStartInfo">ProcessStartInfo</see> that has the given arguments.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.GetStorageEmulatorProcess">
            <summary>
            Queries the storage emulator process from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.GetStorageEmulatorPath">
            <summary>
            Returns a full path to the storage emulator executable, including the executable name and file extension.
            </summary>
            <returns>A full path to the storage emulator executable, or null if not found.</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.StorageEmulator.GetProgramFilesBasePath">
            <summary>
            Determines the Program Files base directory.
            </summary>
            <returns>The Program files base directory.</returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.TestingUtils">
            <summary> Collection of test utilities </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.WaitUntilAsync(System.Func{System.Boolean,System.Threading.Tasks.Task{System.Boolean}},System.TimeSpan)">
            <summary> Run the predicate until it succeed or times out </summary>
            <param name="predicate">The predicate to run</param>
            <param name="timeout">The timeout value</param>
            <returns>True if the predicate succeed, false otherwise</returns>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.Multiply(System.TimeSpan,System.Double)">
            <summary> Multipy a timeout by a value </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.ConfigureThreadPoolSettingsForStorageTests(System.Int32)">
            <summary> Configure the ThreadPool and the ServicePointManager for tests </summary>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan,System.String)">
            <summary> Try to complete the task in a given time </summary>
            <param name="taskToComplete">The task to run</param>
            <param name="timeout">The timeout value</param>
            <param name="message">The message to put in the TimeoutException if the task didn't complete in the given time</param>
            <exception cref="T:System.TimeoutException">If the task didn't complete in the given time</exception>
        </member>
        <member name="M:Orleans.TestingHost.Utils.TestingUtils.RoundTripDotNetSerializer``1(``0)">
            <summary> Serialize and deserialize the input </summary>
            <typeparam name="T">The type of the input</typeparam>
            <param name="input">The input to serialize and deserialize</param>
            <returns>Input that have been serialized and then deserialized</returns>
        </member>
        <member name="T:Orleans.TestingHost.Utils.ThreadSafeRandom">
            <summary>
            Thread-safe random number generator.
            Similar to the implementation by Steven Toub: http://blogs.msdn.com/b/pfxteam/archive/2014/10/20/9434171.aspx
            </summary>
        </member>
        <member name="T:Orleans.TestingHost.TestClusterOptions">
            <summary>Configuration builder for starting a <see cref="T:Orleans.TestingHost.TestCluster"/>. It is not required to use this, but it is way simpler than crafting the configuration manually.</summary>
        </member>
        <member name="T:Orleans.TestingHost.TestClusterOptions.FallbackOptions">
            <summary>Extended options to be used as fallbacks in the case that explicit options are not provided by the user.</summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.TraceToConsole">
            <summary>Gets or sets whether the cluster will output traces in the console by default</summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.LogsFolder">
            <summary>Gets or sets the default subfolder the the logs</summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.DataConnectionString">
            <summary>Gets or sets the default data connection string to use in tests</summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.InitialSilosCount">
            <summary>Gets or sets the default initial silo count</summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.FallbackOptions.DefaultConfigurationBuilder">
            <summary>Creates a default configuration builder with some defaults.</summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.DefaultExtendedConfiguration">
            <summary>Configure defaults for building the configurations</summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Orleans.TestingHost.TestClusterOptions"/> using the default <see cref="P:Orleans.TestingHost.TestClusterOptions.ExtendedFallbackOptions"/> specified by <see cref="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.DefaultExtendedConfiguration"/>.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of <see cref="T:Orleans.TestingHost.TestClusterOptions"/> overriding the initial silos count and using the default <see cref="P:Orleans.TestingHost.TestClusterOptions.ExtendedFallbackOptions"/> specified by <see cref="P:Orleans.TestingHost.TestClusterOptions.FallbackOptions.DefaultExtendedConfiguration"/>.
            </summary>
            <param name="initialSilosCount">The number of initial silos to deploy.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:Orleans.TestingHost.TestClusterOptions"/> using the specified configuration.
            </summary>
            <param name="extendedConfiguration">Configuration that can be bound to an instance of <see cref="P:Orleans.TestingHost.TestClusterOptions.ExtendedFallbackOptions"/>.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.#ctor(Orleans.TestingHost.TestClusterOptions.FallbackOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Orleans.TestingHost.TestClusterOptions"/>.
            </summary>
            <param name="extendedFallbackOptions">Fallback options to use when they are not explicitly specified in the <see cref="P:Orleans.TestingHost.TestClusterOptions.ClusterConfiguration"/>.</param>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.ExtendedFallbackOptions">
            <summary>
            Gets or sets fallback options in the case that some configuration settings are not explicitly provided by the user, such as the <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionString"/>
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.BaseGatewayPort">
            <summary>Gets or sets the base port number to use for silo's gateways</summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.BaseSiloPort">
            <summary>Gets or sets the base port number to use for silos
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.ClusterConfiguration">
            <summary>Gets or sets the cluster configuration. If no value is specified when getting the configuration, a new one will be built with <see cref="M:Orleans.TestingHost.TestClusterOptions.BuildClusterConfiguration"/></summary>
        </member>
        <member name="P:Orleans.TestingHost.TestClusterOptions.ClientConfiguration">
            <summary>Gets or sets the client configuration. If no value is specified when getting the configuration, a new one will be built with <see cref="M:Orleans.TestingHost.TestClusterOptions.BuildClientConfiguration(Orleans.Runtime.Configuration.ClusterConfiguration)"/></summary>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.BuildClusterConfiguration(System.Int32,System.Int32,System.Int32,Orleans.TestingHost.TestClusterOptions.FallbackOptions)">
            <summary>Build a cluster configuration.</summary>
            <param name="baseSiloPort">Base port number to use for silos</param>
            <param name="baseGatewayPort">Base port number to use for silo's gateways</param>
            <param name="silosCount">The number of initial silos to deploy.</param>
            <param name="extendedOptions">The extended fallback options.</param>
            <returns>The builded cluster configuration</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.AddNodeConfiguration(Orleans.Runtime.Configuration.ClusterConfiguration,Orleans.Runtime.Silo.SiloType,System.Int16,System.Int32,System.Int32)">
            <summary>Adds a silo config to the target cluster config.</summary>
            <param name="config">The target cluster configuration</param>
            <param name="siloType">The type of the silo to add</param>
            <param name="instanceNumber">The instance number of the silo</param>
            <param name="baseSiloPort">Base silo port to use</param>
            <param name="baseGatewayPort">Base gateway silo port to use</param>
            <returns>The silo configuration added</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestClusterOptions.BuildClientConfiguration(Orleans.Runtime.Configuration.ClusterConfiguration)">
            <summary>
            Build the client configuration based on the cluster configuration. If a debugger is attached, 
            the response timeout will be overridden to 1000000ms
            </summary>
            <param name="clusterConfig">The reference cluster configuration.</param>
            <returns>THe builded client configuration</returns>
        </member>
        <member name="T:Orleans.TestingHost.TestingClientOptions">
            <summary> Client options to use in <see cref="T:Orleans.TestingHost.TestingSiloHost"/> </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingClientOptions.DEFAULT_CLIENT_CONFIG_FILE">
            <summary> Default path for the client config file </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.ClientConfigFile">
            <summary> Get or set the client config file </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.ResponseTimeout">
            <summary> Get or set the response timeout </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.ProxiedGateway">
            <summary> If set to true the property <see cref="P:Orleans.TestingHost.TestingClientOptions.PreferedGatewayIndex"/> will be used </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.Gateways">
            <summary> Get or set the list of gateways to use </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.PreferedGatewayIndex">
            <summary> The index in <see cref="P:Orleans.TestingHost.TestingClientOptions.Gateways"/> list to use as the prefered gateway </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.PropagateActivityId">
            <summary> If set to truem the activity id will be propagated </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingClientOptions.AdjustConfig">
            <summary> Delegate to apply transformation to the client configuration </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingClientOptions.#ctor">
            <summary> Construct a new TestingClientOptions using default value </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingClientOptions.Copy">
            <summary> Copy the current TestingClientOptions </summary>
            <returns>A copy of the target</returns>
        </member>
        <member name="T:Orleans.TestingHost.TestCluster">
            <summary>
            A host class for local testing with Orleans using in-process silos. 
            Runs a Primary and optionally secondary silos in separate app domains, and client in the main app domain.
            Additional silos can also be started in-process on demand if required for particular test cases.
            </summary>
            <remarks>
            Make sure that your test project references your test grains and test grain interfaces 
            projects, and has CopyLocal=True set on those references [which should be the default].
            </remarks>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.Primary">
            <summary>
            Primary silo handle
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.SecondarySilos">
            <summary>
            List of handles to the secondary silos
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.ClientConfiguration">
            <summary>
            Client configuration to use when initializing the client
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.ClusterConfiguration">
            <summary>
            Cluster configuration
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.DeploymentId">
            <summary>
            DeploymentId of the cluster
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.GrainFactory">
            <summary>
            GrainFactory to use in the tests
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.StreamProviderManager">
            <summary>
            The client-side <see cref="P:Orleans.TestingHost.TestCluster.StreamProviderManager"/>.
            </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestCluster.InternalGrainFactory">
            <summary>
            GrainFactory to use in the tests
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.#ctor">
            <summary>
            Configure the default Primary test silo, plus client in-process.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.#ctor(Orleans.TestingHost.TestClusterOptions)">
            <summary>
            Configures the test cluster plus client in-process.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.#ctor(Orleans.Runtime.Configuration.ClusterConfiguration)">
            <summary>
            Configures the test cluster plus default client in-process.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.#ctor(Orleans.Runtime.Configuration.ClusterConfiguration,Orleans.Runtime.Configuration.ClientConfiguration)">
            <summary>
            Configures the test cluster plus client in-process,
            using the specified silo and client config configurations.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.Deploy">
            <summary>
            Deploys the cluster using the specified configuration and starts the client in-process.
            It will start all the silos defined in the <see cref="P:Orleans.Runtime.Configuration.ClusterConfiguration.Overrides"/> collection.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.Deploy(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deploys the cluster using the specified configuration and starts the client in-process.
            </summary>
            <param name="siloNames">Only deploy the specified silos which must also be present in the <see cref="P:Orleans.Runtime.Configuration.ClusterConfiguration.Overrides"/> collection.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.DeployAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deploys the cluster using the specified configuration and starts the client in-process.
            </summary>
            <param name="siloNames">Only deploy the specified silos which must also be present in the <see cref="P:Orleans.Runtime.Configuration.ClusterConfiguration.Overrides"/> collection.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.GetActiveSilos">
            <summary>
            Get the list of current active silos.
            </summary>
            <returns>List of current silos.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.GetSiloForAddress(Orleans.Runtime.SiloAddress)">
            <summary>
            Find the silo handle for the specified silo address.
            </summary>
            <param name="siloAddress">Silo address to be found.</param>
            <returns>SiloHandle of the appropriate silo, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.WaitForLivenessToStabilizeAsync(System.Boolean)">
            <summary>
            Wait for the silo liveness sub-system to detect and act on any recent cluster membership changes.
            </summary>
            <param name="didKill">Whether recent membership changes we done by graceful Stop.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartAdditionalSilo">
            <summary>
            Start an additional silo, so that it joins the existing cluster.
            </summary>
            <returns>SiloHandle for the newly started silo.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartAdditionalSilos(System.Int32)">
            <summary>
            Start a number of additional silo, so that they join the existing cluster.
            </summary>
            <param name="numExtraSilos">Number of additional silos to start.</param>
            <returns>List of SiloHandles for the newly started silos.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopSecondarySilos">
            <summary>
            Stop any additional silos, not including the default Primary silo.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopPrimarySilo">
            <summary>
            Stops the default Primary silo.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopAllSilos">
            <summary>
            Stop all current silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StopSilo(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do a semi-graceful Stop of the specified silo.
            </summary>
            <param name="instance">Silo to be stopped.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.KillSilo(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do an immediate Kill of the specified silo.
            </summary>
            <param name="instance">Silo to be killed.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.KillClient">
            <summary>
            Performs a hard kill on client.  Client will not cleanup resources.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.RestartSilo(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do a Stop or Kill of the specified silo, followed by a restart.
            </summary>
            <param name="instance">Silo to be restarted.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.RestartStoppedSecondarySilo(System.String)">
            <summary>
            Restart a previously stopped.
            </summary>
            <param name="siloName">Silo to be restarted.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.InitializeClient">
            <summary>
            Initialize the grain client. This should be already done by <see cref="M:Orleans.TestingHost.TestCluster.Deploy"/> or <see cref="M:Orleans.TestingHost.TestCluster.DeployAsync(System.Collections.Generic.IEnumerable{System.String})"/>
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestCluster.StartOrleansSilo(Orleans.TestingHost.TestCluster,Orleans.Runtime.Silo.SiloType,Orleans.Runtime.Configuration.ClusterConfiguration,Orleans.Runtime.Configuration.NodeConfiguration)">
            <summary>
            Start a new silo in the target cluster
            </summary>
            <param name="cluster">The TestCluster in which the silo should be deployed</param>
            <param name="type">The type of the silo to deploy</param>
            <param name="clusterConfig">The cluster config to use</param>
            <param name="nodeConfig">The configuration for the silo to deploy</param>
            <returns>A handle to the silo deployed</returns>
        </member>
        <member name="T:Orleans.TestingHost.TestingSiloHost">
            <summary>
            Important note: <see cref="T:Orleans.TestingHost.TestingSiloHost"/> will be eventually deprectated. It is recommended that you use <see cref="T:Orleans.TestingHost.TestCluster"/> instead.
            A host class for local testing with Orleans using in-process silos.
            
            Runs a Primary and Secondary silo in seperate app domains, and client in the main app domain.
            Additional silos can also be started in-process if required for particular test cases.
            </summary>
            <remarks>
            Make sure the following files are included in any test projects that use <c>TestingSiloHost</c>, 
            and ensure "Copy if Newer" is set to ensure the config files are included in the test set.
            <code>
            OrleansConfigurationForTesting.xml
            ClientConfigurationForTesting.xml
            </code>
            Also make sure that your test project references your test grains and test grain interfaces 
            projects, and has CopyLocal=True set on those references [which should be the default].
            </remarks>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.Instance">
            <summary> Single instance of TestingSiloHost </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.Primary">
            <summary> Primary silo handle </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.Secondary">
            <summary> List of handles to the secondary silos </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.ClientConfig">
            <summary> Get or set the client configuration/// </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.Globals">
            <summary> Get or set the global configuration </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingSiloHost.DeploymentId">
            <summary> The deploymentId value to use in the cluster </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingSiloHost.DeploymentIdPrefix">
            <summary> The prefix to use in the deploymentId </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingSiloHost.BasePort">
            <summary> Base port number for silos in cluster </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingSiloHost.ProxyBasePort">
            <summary> Base port number for the gateway silos </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingSiloHost.InstanceCounter">
            <summary> Number of silos in the cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.GrainFactory">
            <summary> GrainFactory to use in the tests </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.InternalGrainFactory">
            <summary> GrainFactory to use in the tests </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloHost.logger">
            <summary> Get the logger to use in tests </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.#ctor">
            <summary>
            Start the default Primary and Secondary test silos, plus client in-process, 
            using the default silo config options.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.#ctor(System.Boolean)">
            <summary>
            Start the default Primary and Secondary test silos, plus client in-process, 
            ensuring that fresh silos are started if they were already running.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.#ctor(Orleans.TestingHost.TestingSiloOptions)">
            <summary>
            Start the default Primary and Secondary test silos, plus client in-process, 
            using the specified silo config options.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.#ctor(Orleans.TestingHost.TestingSiloOptions,Orleans.TestingHost.TestingClientOptions)">
            <summary>
            Start the default Primary and Secondary test silos, plus client in-process, 
            using the specified silo and client config options.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.CreateUninitialized">
            <summary> Create a new TestingSiloHost without initialization </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.RedeployTestingSiloHost(Orleans.TestingHost.TestingSiloOptions,Orleans.TestingHost.TestingClientOptions)">
            <summary>
            Stop the TestingSilo and restart it.
            </summary>
            <param name="siloOptions">Cluster options to use.</param>
            <param name="clientOptions">Client optin to use.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.GetActiveSilos">
            <summary>
            Get the list of current active silos.
            </summary>
            <returns>List of current silos.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.GetSiloForAddress(Orleans.Runtime.SiloAddress)">
            <summary>
            Find the silo handle for the specified silo address.
            </summary>
            <param name="siloAddress">Silo address to be found.</param>
            <returns>SiloHandle of the appropriate silo, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.WaitForLivenessToStabilizeAsync(System.Boolean)">
            <summary>
            Wait for the silo liveness sub-system to detect and act on any recent cluster membership changes.
            </summary>
            <param name="didKill">Whether recent membership changes we done by graceful Stop.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StartAdditionalSilo">
            <summary>
            Start an additional silo, so that it joins the existing cluster with the default Primary and Secondary silos.
            </summary>
            <returns>SiloHandle for the newly started silo.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StartAdditionalSilos(System.Int32)">
            <summary>
            Start a number of additional silo, so that they join the existing cluster with the default Primary and Secondary silos.
            </summary>
            <param name="numExtraSilos">Number of additional silos to start.</param>
            <returns>List of SiloHandles for the newly started silos.</returns>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StopAdditionalSilos">
            <summary>
            Stop any additional silos, not including the default Primary and Secondary silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.RestartAllAdditionalSilos">
            <summary>
            Restart all additional silos, not including the default Primary and Secondary silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StopDefaultSilos">
            <summary>
            Stop the default Primary and Secondary silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StopAllSilos">
            <summary>
            Stop all current silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StopAllSilosIfRunning">
            <summary>
            Stop all current silos if running.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.RestartDefaultSilos(System.Boolean)">
            <summary>
            Restart the default Primary and Secondary silos.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StartSecondarySilo(Orleans.TestingHost.TestingSiloOptions,System.Int32)">
            <summary>
            Start a Secondary silo with a given instanceCounter 
            (allows to set the port number as before or new, depending on the scenario).
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StopSilo(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do a semi-graceful Stop of the specified silo.
            </summary>
            <param name="instance">Silo to be stopped.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.KillSilo(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do an immediate Kill of the specified silo.
            </summary>
            <param name="instance">Silo to be killed.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.KillClient">
            <summary>
            Performs a hard kill on client.  Client will not cleanup reasources.
            </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.RestartSilo(Orleans.TestingHost.SiloHandle)">
            <summary>
            Do a Stop or Kill of the specified silo, followed by a restart.
            </summary>
            <param name="instance">Silo to be restarted.</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.AdjustForTest(Orleans.Runtime.Configuration.ClusterConfiguration,Orleans.TestingHost.TestingSiloOptions)">
            <summary> Modify the cluster configurations to the test environment </summary>
            <param name="config">The cluster configuration to modify</param>
            <param name="options">the TestingSiloOptions to modify</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.AdjustForTest(Orleans.Runtime.Configuration.ClientConfiguration,Orleans.TestingHost.TestingClientOptions)">
            <summary> Modify the ClientConfiguration to the test environment </summary>
            <param name="config">The client configuration to modify</param>
            <param name="options">the TestingClientOptions to modify</param>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.InitializeClient">
            <summary> Initialize the grain client </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloHost.StartOrleansSilo(Orleans.TestingHost.TestingSiloHost,Orleans.Runtime.Silo.SiloType,Orleans.TestingHost.TestingSiloOptions,System.Int32,System.AppDomain)">
            <summary>
            Start a new silo in the target cluster
            </summary>
            <param name="host">The target cluster</param>
            <param name="type">The type of the silo to deploy</param>
            <param name="options">The options to use for the silo</param>
            <param name="instanceCount">The instance count of the silo</param>
            <param name="shared">The shared AppDomain to use</param>
            <returns>A handle to the deployed silo</returns>
        </member>
        <member name="T:Orleans.TestingHost.TestingSiloOptions">
            <summary> Silo options to use in <see cref="T:Orleans.TestingHost.TestingSiloHost"/> </summary>
        </member>
        <member name="F:Orleans.TestingHost.TestingSiloOptions.DEFAULT_SILO_CONFIG_FILE">
            <summary> Default path for the silo config file </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.StartFreshOrleans">
            <summary> If set to true, will start a new orleans cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.StartPrimary">
            <summary> If set to true, will start the primary cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.StartSecondary">
            <summary> If set to true, will start secondary clusters </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.StartClient">
            <summary> If set to true, will start the client </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.SiloConfigFile">
            <summary> Get or set the cluster config file </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.PickNewDeploymentId">
            <summary> If set to true, will generate a new deploymentId </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.PropagateActivityId">
            <summary> If set to true, will propagate the activityId </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.BasePort">
            <summary> Get or set the base port value for the silos </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.ProxyBasePort">
            <summary> Get or set the base port value for the silos gateway </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.MachineName">
            <summary> Get or set the machine name to display </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.LargeMessageWarningThreshold">
            <summary> Get or set the warning thresold for large message </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.LivenessType">
            <summary> Get or set the liveness provider type to use in the cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.ParallelStart">
            <summary> If set to true, will start in parallel the silos </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.ReminderServiceType">
            <summary> Get or set the reminder provider type to use in the cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.DataConnectionString">
            <summary> Get or set the connection string to use in the cluster </summary>
        </member>
        <member name="P:Orleans.TestingHost.TestingSiloOptions.AdjustConfig">
            <summary> Delegate to apply transformation to the cluster configuration </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloOptions.#ctor">
            <summary> Construct a new TestingSiloOptions using default value </summary>
        </member>
        <member name="M:Orleans.TestingHost.TestingSiloOptions.Copy">
            <summary> Copy the current TestingSiloOptions </summary>
            <returns>A copy of the target</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ConfigurationExtensions">
            <summary>
            Silo configuration extensions.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigurationExtensions.ApplyToAllNodes(Orleans.Runtime.Configuration.ClusterConfiguration,System.Action{Orleans.Runtime.Configuration.NodeConfiguration})">
            <summary>
            Applies the specified config change defined by <paramref name="nodeConfigUpdater"/> to 
            <see cref="P:Orleans.Runtime.Configuration.ClusterConfiguration.Defaults"/> and all the node configurations currently 
            defined in <see cref="P:Orleans.Runtime.Configuration.ClusterConfiguration.Overrides"/>.
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="nodeConfigUpdater">The function to apply to each node configuration.</param>
        </member>
    </members>
</doc>
