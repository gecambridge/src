<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrleansEventSourcing</name>
    </assembly>
    <members>
        <member name="T:Orleans.Runtime.Configuration.LogConsistencyConfigurationExtensions">
            <summary>
            Extension methods for configuration classes specific to OrleansEventSourcing.dll 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.LogConsistencyConfigurationExtensions.AddLogStorageBasedLogConsistencyProvider(Orleans.Runtime.Configuration.ClusterConfiguration,System.String)">
            <summary>
            Adds a log consistency provider of type <see cref="T:Orleans.EventSourcing.LogStorage.LogConsistencyProvider"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.LogConsistencyConfigurationExtensions.AddStateStorageBasedLogConsistencyProvider(Orleans.Runtime.Configuration.ClusterConfiguration,System.String)">
            <summary>
            Adds a log consistency provider of type <see cref="T:Orleans.EventSourcing.StateStorage.LogConsistencyProvider"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.LogConsistencyConfigurationExtensions.AddCustomStorageInterfaceBasedLogConsistencyProvider(Orleans.Runtime.Configuration.ClusterConfiguration,System.String,System.String)">
            <summary>
            Adds a log consistency provider of type <see cref="T:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider"/>
            </summary>
            <param name="config">The cluster configuration object to add provider to.</param>
            <param name="providerName">The provider name.</param>
            <param name="numStorageGrains">The number of storage grains to use.</param>
        </member>
        <member name="T:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2">
            <summary>
            A log consistency adaptor that uses the user-provided storage interface <see cref="T:Orleans.EventSourcing.CustomStorage.ICustomStorageInterface`2"/>. 
            This interface must be implemented by any grain that uses this log view adaptor.
            </summary>
            <typeparam name="TLogView">log view type</typeparam>
            <typeparam name="TLogEntry">log entry type</typeparam>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.#ctor(Orleans.LogConsistency.ILogViewAdaptorHost{`0,`1},`0,Orleans.LogConsistency.ILogConsistencyProtocolServices,System.String)">
            <summary>
            Initialize a new instance of CustomStorageAdaptor class
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.LastConfirmedView">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.GetConfirmedVersion">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.InitializeConfirmedView(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.SupportSubmissions">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.MakeSubmissionEntry(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.OnMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.WriteAsync">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.UpdatePrimaryFailed">
            <summary>
            Describes a connection issue that occurred when updating the primary storage.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.UpdatePrimaryFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.ReadFromPrimaryFailed">
            <summary>
            Describes a connection issue that occurred when reading from the primary storage.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.ReadFromPrimaryFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.UpdateNotificationMessage">
            <summary>
            A notification message that is sent to remote instances of this grain after the primary has been
            updated, to let them know the latest version. Contains all the updates that were applied.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.UpdateNotificationMessage.Version">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.UpdateNotificationMessage.Updates">
            <summary> The list of updates that were applied. </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.UpdateNotificationMessage.ToString">
            <summary>
            A representation of this notification message suitable for tracing.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.OnNotificationReceived(Orleans.EventSourcing.Common.INotificationMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.CustomStorageAdaptor`2.ProcessNotifications">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider">
            <summary>
            A log-consistency provider that relies on grain-specific custom code for 
            reading states from storage, and appending deltas to storage.
            Grains that wish to use this provider must implement the <see cref="T:Orleans.EventSourcing.CustomStorage.ICustomStorageInterface`2"/>
            interface, to define how state is read and how deltas are written.
            If the provider attribute "PrimaryCluster" is supplied in the provider configuration, then only the specified cluster
            accesses storage, and other clusters may not issue updates. 
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.Name">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.Log">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.PrimaryCluster">
            <summary>
            Specifies a clusterid of the primary cluster from which to access storage exclusively, null if
            storage should be accessed direcly from all clusters.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.UsesStorageProvider">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.GetLoggerName">
            <summary>
            Gets a unique name for this provider, suited for logging.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Init function
            </summary>
            <param name="name">provider name</param>
            <param name="providerRuntime">provider runtime, see <see cref="T:Orleans.Providers.IProviderRuntime"/></param>
            <param name="config">provider configuration</param>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.Close">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.LogConsistencyProvider.MakeLogViewAdaptor``2(Orleans.LogConsistency.ILogViewAdaptorHost{``0,``1},``0,System.String,Orleans.Storage.IStorageProvider,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.CustomStorage.ICustomStorageInterface`2">
            <summary>
            The storage interface exposed by grains that want to use the CustomStorage log-consistency provider
            <typeparam name="TState">The type for the state of the grain.</typeparam>
            <typeparam name="TDelta">The type for delta objects that represent updates to the state.</typeparam>
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.ICustomStorageInterface`2.ReadStateFromStorage">
            <summary>
            Reads the current state and version from storage
            (note that the state object may be mutated by the provider, so it must not be shared).
            </summary>
            <returns>the version number and a  state object.</returns>
        </member>
        <member name="M:Orleans.EventSourcing.CustomStorage.ICustomStorageInterface`2.ApplyUpdatesToStorage(System.Collections.Generic.IReadOnlyList{`1},System.Int32)">
            <summary>
            Applies the given array of deltas to storage, and returns true, if the version in storage matches the expected version. 
            Otherwise, does nothing and returns false. If successful, the version of storage must be increased by the number of deltas.
            </summary>
            <returns>true if the deltas were applied, false otherwise</returns>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogConsistencyProvider">
             <summary>
             A log-consistency provider that stores the latest view in primary storage, using any standard storage provider.
             Supports multiple clusters connecting to the same primary storage (doing optimistic concurrency control via e-tags)
            <para>
             The log itself is transient, i.e. not actually saved to storage - only the latest view (snapshot) and some 
             metadata (the log position, and write flags) are stored in the primary. 
             </para>
             </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.Name">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.Log">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.UsesStorageProvider">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.GetLoggerName">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Init method
            </summary>
            <param name="name">Consistency provider name</param>
            <param name="providerRuntime">Provider runtime</param>
            <param name="config">Provider config</param>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.Close">
            <summary>
            Close method
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogConsistencyProvider.MakeLogViewAdaptor``2(Orleans.LogConsistency.ILogViewAdaptorHost{``0,``1},``0,System.String,Orleans.Storage.IStorageProvider,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Make log view adaptor 
            </summary>
            <typeparam name="TView">The type of the view</typeparam>
            <typeparam name="TEntry">The type of the log entries</typeparam>
            <param name="hostGrain">The grain that is hosting this adaptor</param>
            <param name="initialState">The initial state for this view</param>
            <param name="grainTypeName">The type name of the grain</param>
            <param name="services">Runtime services for multi-cluster coherence protocols</param>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2">
             <summary>
             A log view adaptor that wraps around a traditional storage adaptor, and uses batching and e-tags
             to append entries.
            <para>
             The log itself is transient, i.e. not actually saved to storage - only the latest view and some 
             metadata (the log position, and write flags) are stored. 
             </para>
             </summary>
             <typeparam name="TLogView">Type of log view</typeparam>
             <typeparam name="TLogEntry">Type of log entry</typeparam>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.#ctor(Orleans.LogConsistency.ILogViewAdaptorHost{`0,`1},`0,Orleans.Storage.IStorageProvider,System.String,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Initialize a StorageProviderLogViewAdaptor class
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.LastConfirmedView">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.GetConfirmedVersion">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.InitializeConfirmedView(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.RetrieveLogSegment(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.MakeSubmissionEntry(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.WriteAsync">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateLogStorageFailed">
            <summary>
            Describes a connection issue that occurred when updating the primary storage.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateLogStorageFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.ReadFromLogStorageFailed">
            <summary>
            Describes a connection issue that occurred when reading from the primary storage.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.ReadFromLogStorageFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateNotificationMessage">
            <summary>
            A notification message sent to remote instances after updating this grain in storage.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateNotificationMessage.Version">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateNotificationMessage.Origin">
            <summary> The cluster that performed the update </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateNotificationMessage.Updates">
            <summary> The list of updates that were applied </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateNotificationMessage.ETag">
            <summary> The e-tag of the storage after applying the updates</summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.UpdateNotificationMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.Merge(Orleans.EventSourcing.Common.INotificationMessage,Orleans.EventSourcing.Common.INotificationMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.OnNotificationReceived(Orleans.EventSourcing.Common.INotificationMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2.ProcessNotifications">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogStateWithMetaDataAndETag`1">
            <summary>
            A class that extends grain state with versioning metadata, so that a grain with log-view consistency
            can use a standard storage provider via <see cref="T:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2"/>
            </summary>
            <typeparam name="TEntry">The type used for log entries</typeparam>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaDataAndETag`1.StateAndMetaData">
            <summary>
            Gets and Sets StateAndMetaData
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaDataAndETag`1.ETag">
            <summary>
            Gets and Sets Etag
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaDataAndETag`1.#ctor">
            <summary>
            Initializes a new instance of GrainStateWithMetaDataAndETag class
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaDataAndETag`1.ToString">
            <summary>
            Convert current GrainStateWithMetaDataAndETag object information to a string
            </summary>
        </member>
        <member name="T:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1">
            <summary>
            A class that extends grain state with versioning metadata, so that a log-consistent grain
            can use a standard storage provider via <see cref="T:Orleans.EventSourcing.LogStorage.LogViewAdaptor`2"/>
            </summary>
            <typeparam name="TEntry"></typeparam>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.Log">
            <summary>
            The stored view of the log
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.GlobalVersion">
            <summary>
            The length of the log
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.WriteVector">
            <summary>
            Metadata that is used to avoid duplicate appends.
            Logically, this is a (string->bit) map, the keys being replica ids
            But this map is represented compactly as a simple string to reduce serialization/deserialization overhead
            Bits are read by <see cref="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.GetBit(System.String)"/> and flipped by  <see cref="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.FlipBit(System.String)"/>.
            Bits are toggled when writing, so that the retry logic can avoid appending an entry twice
            when retrying a failed append. 
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1"/> class.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.GetBit(System.String)">
            <summary>
            Gets one of the bits in <see cref="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.WriteVector"/>
            </summary>
            <param name="Replica">The replica for which we want to look up the bit</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.FlipBit(System.String)">
            <summary>
            toggle one of the bits in <see cref="P:Orleans.EventSourcing.LogStorage.LogStateWithMetaData`1.WriteVector"/> and return the new value.
            </summary>
            <param name="Replica">The replica for which we want to flip the bit</param>
            <returns>the state of the bit after flipping it</returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.StringEncodedWriteVector.GetBit(System.String,System.String)">
            <summary>
            Gets one of the bits in writeVector
            </summary>
            <param name="Replica">The replica for which we want to look up the bit</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.StringEncodedWriteVector.FlipBit(System.String@,System.String)">
            <summary>
            toggle one of the bits in writeVector and return the new value.
            </summary>
            <param name="writeVector">The write vector in which we want to flip the bit</param>
            <param name="Replica">The replica for which we want to flip the bit</param>
            <returns>the state of the bit after flipping it</returns>
        </member>
        <member name="T:Orleans.EventSourcing.Common.NotificationFailed">
            <summary>
            Describes a connection issue that occurred when sending update notifications to remote instances.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.NotificationFailed.RemoteCluster">
            <summary> The destination cluster which we could not reach successfully. </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.NotificationFailed.Exception">
            <summary> The exception we caught when trying to send the notification message. </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.NotificationFailed.ComputeRetryDelay(System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.Common.PrimaryOperationFailed">
            <summary>
            Describes a connection issue that occurred when communicating with primary storage.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryOperationFailed.Exception">
            <summary>
            The exception that was caught when communicating with the primary.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryOperationFailed.ComputeRetryDelay(System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.Common.INotificationMessage">
            <summary>
            Base class for notification messages that are sent by log view adaptors to other 
            clusters, after updating the log. All subclasses must be serializable.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.INotificationMessage.Version">
            <summary>The version number.</summary>
        </member>
        <member name="T:Orleans.EventSourcing.Common.VersionNotificationMessage">
            <summary>A simple notification message containing only the version.</summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.VersionNotificationMessage.Version">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.Common.BatchedNotificationMessage">
            <summary>A notification message containing a batch of notification messages.</summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.BatchedNotificationMessage.Notifications">
            <summary>The notification messages contained in this batch.</summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.BatchedNotificationMessage.Version">
            <summary>The version number - for a batch, this is the maximum version contained.</summary>
        </member>
        <member name="T:Orleans.EventSourcing.Common.NotificationTracker">
            <summary>
            Helper class for tracking notifications that a grain sends to other clusters after updating the log.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.NotificationTracker.UnresolvedConnectionIssues">
            <summary>
            returns unresolved connection issues observed by the workers
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.NotificationTracker.UpdateNotificationTargets(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Update the multicluster configuration (change who to send notifications to)
            </summary>
        </member>
        <member name="T:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker">
            <summary>
            Asynchronous batch worker that sends notfications to a particular cluster.
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker.QueuedMessage">
            <summary>
            Queue messages
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker.QueueState">
            <summary>
            Queue state
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker.LastConnectionIssue">
            <summary>
            Last exception
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker.Done">
            <summary>
            Is current task done or not
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker.#ctor(Orleans.EventSourcing.Common.NotificationTracker,System.String)">
            <summary>
            Initialize a new instance of NotificationWorker class
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.NotificationTracker.NotificationWorker.Enqueue(Orleans.EventSourcing.Common.INotificationMessage)">
            <summary>
            Enqueue method
            </summary>
            <param name="msg">The message to enqueue</param>
        </member>
        <member name="T:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3">
             <summary>
             A general template for constructing log view adaptors that are based on
             a sequentially read and written primary. We use this to construct 
             a variety of different log-consistency providers, all following the same basic pattern 
             (read and write latest view from/to primary, and send notifications after writing).
            <para>
             Note that the log itself is transient, i.e. not actually saved to storage - only the latest view and some 
             metadata (the log position, and write flags) is stored in the primary. 
             It is safe to interleave calls to this adaptor (using grain scheduler only, of course).
             </para>
            <para>
             Subclasses override ReadAsync and WriteAsync to read from / write to primary.
             Calls to the primary are serialized, i.e. never interleave.
             </para>
             </summary>
             <typeparam name="TLogView">The user-defined view of the log</typeparam>
             <typeparam name="TLogEntry">The type of the log entries</typeparam>
             <typeparam name="TSubmissionEntry">The type of submission entries stored in pending queue</typeparam>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.InitializeConfirmedView(`0)">
            <summary>
            Set confirmed view the initial value (a view of the empty log)
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.LastConfirmedView">
            <summary>
            Read cached global state.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.GetConfirmedVersion">
            <summary>
            Read version of cached global state.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.ReadAsync">
            <summary>
            Read the latest primary state. Must block/retry until successful.
            Should not throw exceptions, but record them in <see cref="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.LastPrimaryIssue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.WriteAsync">
            <summary>
            Apply pending entries to the primary. Must block/retry until successful. 
            Should not throw exceptions, but record them in <see cref="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.LastPrimaryIssue"/>
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.MakeSubmissionEntry(`1)">
            <summary>
            Create a submission entry for the submitted log entry. 
            Using a type parameter so we can add protocol-specific info to this class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.SupportSubmissions">
            <summary>
            Whether this cluster supports submitting updates
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.OnMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>
            Handle protocol messages.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.OnNotificationReceived(Orleans.EventSourcing.Common.INotificationMessage)">
            <summary>
            Handle notification messages. Override this to handle notification subtypes.
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.lastVersionNotified">
            <summary>
            The last version we have been notified of
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.ProcessNotifications">
            <summary>
            Process stored notifications during worker cycle. Override to handle notification subtypes.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Merge(Orleans.EventSourcing.Common.INotificationMessage,Orleans.EventSourcing.Common.INotificationMessage)">
            <summary>
            Merge two notification messages, for batching. Override to handle notification subtypes.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.OnConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Called when configuration of the multicluster is changing.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Host">
            <summary>
            The grain that is using this adaptor.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Services">
            <summary>
            The runtime services required for implementing notifications between grain instances in different cluster.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Configuration">
            <summary>
            The current multi-cluster configuration for this grain instance.
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.notificationTracker">
            <summary>
            Tracks notifications sent. Created lazily since many copies will never need to send notifications.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.#ctor(Orleans.LogConsistency.ILogViewAdaptorHost{`0,`1},`0,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Construct an instance, for the given parameters.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.PreOnActivate">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.PostOnDeactivate">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.CopyTentativeState">
            called at beginning of WriteAsync to the current tentative state
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.GetCurrentBatchOfUpdates">
            called at beginning of WriteAsync to the current batch of updates
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.GetNumberPendingUpdates">
            called at beginning of WriteAsync to get current number of pending updates
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.tentativeStateInternal">
            <summary>
             Tentative State. Represents Stable State + effects of pending updates.
             Computed lazily (null if not in use)
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.needRefresh">
            <summary>
            A flag that indicates to the worker that the client wants to refresh the state
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.needInitialRead">
            <summary>
            A flag that indicates that we have not read global state at all yet, and should do so
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.worker">
            <summary>
            Background worker which asynchronously sends operations to the leader
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.stats">
            statistics gathering. Is null unless stats collection is turned on.
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.IsMyClusterJoined">
            For use by protocols. Determines if this cluster is part of the configured multicluster.
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.EnsureClusterJoinedAsync">
            <summary>
            Block until this cluster is joined to the multicluster.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.GetCaughtUpWithConfigurationAsync(System.DateTime)">
            <summary>
            Wait until this cluster has received a configuration that is at least as new as timestamp
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Submit(`1)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.SubmitRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.TryAppend(`1)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.TryAppendRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.TentativeView">
            <inheritdoc />
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.ConfirmedView">
            <inheritdoc />
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.ConfirmedVersion">
            <inheritdoc />
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.OnProtocolMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>
            Called from network
            </summary>
            <param name="payLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.OnMultiClusterConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Called by MultiClusterOracle when there is a configuration change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.EnableStatsCollection">
            <summary>
            method is virtual so subclasses can add their own events
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.DisableStatsCollection">
            <summary>
            Disable stats collection
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.GetStats">
            <summary>
            Get states
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Work">
            <summary>
            batch worker performs reads from and writes to global state.
            only one work cycle is active at any time.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.UpdatePrimary">
            <summary>
            This function stores the operations in the pending queue as a batch to the primary.
            Retries until some batch commits or there are no updates left.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.UnresolvedConnectionIssues">
            <summary>
            returns a list of all connection health issues that have not been restored yet.
            Such issues are observed while communicating with the primary, or while trying to 
            notify other clusters, for example.
            </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.LastPrimaryIssue">
            <summary>
            Store the last issue that occurred while reading or updating primary.
            Is null if successful.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.Synchronize">
            <inheritdoc />
        </member>
        <member name="P:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.UnconfirmedSuffix">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.ConfirmSubmittedEntries">
            <inheritdoc />
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.NotifyPromises(System.Int32,System.Boolean)">
            <summary>
            send failure notifications
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.RemoveStaleConditionalUpdates">
            <summary>
            go through updates and remove all the conditional updates that have already failed
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.PrimaryBasedLogViewAdaptor`3.BroadcastNotification(Orleans.EventSourcing.Common.INotificationMessage,System.String)">
            <summary>
            Send a notification message to all remote instances
            </summary>
            <param name="msg">the notification message to send</param>
            <param name="exclude">if non-null, exclude this cluster id from the notification</param>
        </member>
        <member name="T:Orleans.EventSourcing.Common.SubmissionEntry`1">
            <summary>
            Base class for submission entries stored in pending queue. 
            </summary>
            <typeparam name="TLogEntry">The type of entry for this submission</typeparam>
        </member>
        <member name="F:Orleans.EventSourcing.Common.SubmissionEntry`1.Entry">
            <summary> The log entry that is submitted. </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.SubmissionEntry`1.SubmissionTime">
            <summary> A timestamp for this submission. </summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.SubmissionEntry`1.ResultPromise">
            <summary> For conditional updates, a promise that resolves once it is known whether the update was successful or not.</summary>
        </member>
        <member name="F:Orleans.EventSourcing.Common.SubmissionEntry`1.ConditionalPosition">
            <summary> For conditional updates, the log position at which this update is supposed to be applied. </summary>
        </member>
        <member name="T:Orleans.EventSourcing.Common.RecordedConnectionIssue">
            <summary>
            Utility class for recording connection issues.
            It is public, not internal, because it is a useful building block for implementing other consistency providers.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.Common.RecordedConnectionIssue.Issue">
            <summary>
            The recorded connection issue, or null if none
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.Common.RecordedConnectionIssue.Record(Orleans.LogConsistency.ConnectionIssue,Orleans.LogConsistency.IConnectionIssueListener,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            record a connection issue, filling in timestamps etc.
            and notify the listener
            </summary>
            <param name="newIssue">the connection issue to be recorded</param>
            <param name="listener">the listener for connection issues</param>
            <param name="services">for reporting exceptions in listener</param>
        </member>
        <member name="M:Orleans.EventSourcing.Common.RecordedConnectionIssue.Resolve(Orleans.LogConsistency.IConnectionIssueListener,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            if there is a recorded issue, notify listener and clear it.
            </summary>
            <param name="listener">the listener for connection issues</param>
            <param name="services">for reporting exceptions in listener</param>
        </member>
        <member name="M:Orleans.EventSourcing.Common.RecordedConnectionIssue.DelayBeforeRetry">
            <summary>
            delays if there was an issue in last attempt, for the duration specified by the retry delay
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.Common.RecordedConnectionIssue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.GrainStateWithMetaDataAndETag`1">
            <summary>
            A class that extends grain state with versioning metadata, so that a grain with log-view consistency
            can use a standard storage provider via <see cref="T:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2"/>
            </summary>
            <typeparam name="TView">The type used for log view</typeparam>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaDataAndETag`1.StateAndMetaData">
            <summary>
            Gets and Sets StateAndMetaData
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaDataAndETag`1.ETag">
            <summary>
            Gets and Sets Etag
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaDataAndETag`1.#ctor(`0)">
            <summary>
            Initialize a new instance of GrainStateWithMetaDataAndETag class with a initialVew
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaDataAndETag`1.#ctor">
            <summary>
            Initializes a new instance of GrainStateWithMetaDataAndETag class
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaDataAndETag`1.ToString">
            <summary>
            Convert current GrainStateWithMetaDataAndETag object information to a string
            </summary>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1">
            <summary>
            A class that extends grain state with versioning metadata, so that a log-consistent grain
            can use a standard storage provider via <see cref="T:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2"/>
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.State">
            <summary>
            The stored view of the log
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.GlobalVersion">
            <summary>
            The length of the log
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.WriteVector">
            <summary>
            Metadata that is used to avoid duplicate appends.
            Logically, this is a (string->bit) map, the keys being replica ids
            But this map is represented compactly as a simple string to reduce serialization/deserialization overhead
            Bits are read by <see cref="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.GetBit(System.String)"/> and flipped by  <see cref="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.FlipBit(System.String)"/>.
            Bits are toggled when writing, so that the retry logic can avoid appending an entry twice
            when retrying a failed append. 
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1"/> class.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1"/> class.
            </summary>
            <param name="initialstate">The initial state of the view</param>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.GetBit(System.String)">
            <summary>
            Gets one of the bits in <see cref="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.WriteVector"/>
            </summary>
            <param name="Replica">The replica for which we want to look up the bit</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.FlipBit(System.String)">
            <summary>
            toggle one of the bits in <see cref="P:Orleans.EventSourcing.StateStorage.GrainStateWithMetaData`1.WriteVector"/> and return the new value.
            </summary>
            <param name="Replica">The replica for which we want to flip the bit</param>
            <returns>the state of the bit after flipping it</returns>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.LogConsistencyProvider">
             <summary>
             A log-consistency provider that stores the latest view in primary storage, using any standard storage provider.
             Supports multiple clusters connecting to the same primary storage (doing optimistic concurrency control via e-tags)
            <para>
             The log itself is transient, i.e. not actually saved to storage - only the latest view (snapshot) and some 
             metadata (the log position, and write flags) are stored in the primary. 
             </para>
             </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.Name">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.Log">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.UsesStorageProvider">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.GetLoggerName">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Init method
            </summary>
            <param name="name">Consistency provider name</param>
            <param name="providerRuntime">Provider runtime</param>
            <param name="config">Provider config</param>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.Close">
            <summary>
            Close method
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogConsistencyProvider.MakeLogViewAdaptor``2(Orleans.LogConsistency.ILogViewAdaptorHost{``0,``1},``0,System.String,Orleans.Storage.IStorageProvider,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Make log view adaptor 
            </summary>
            <typeparam name="TView">The type of the view</typeparam>
            <typeparam name="TEntry">The type of the log entries</typeparam>
            <param name="hostGrain">The grain that is hosting this adaptor</param>
            <param name="initialState">The initial state for this view</param>
            <param name="grainTypeName">The type name of the grain</param>
            <param name="services">Runtime services for multi-cluster coherence protocols</param>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2">
             <summary>
             A log view adaptor that wraps around a traditional storage adaptor, and uses batching and e-tags
             to append entries.
            <para>
             The log itself is transient, i.e. not actually saved to storage - only the latest view and some 
             metadata (the log position, and write flags) are stored. 
             </para>
             </summary>
             <typeparam name="TLogView">Type of log view</typeparam>
             <typeparam name="TLogEntry">Type of log entry</typeparam>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.#ctor(Orleans.LogConsistency.ILogViewAdaptorHost{`0,`1},`0,Orleans.Storage.IStorageProvider,System.String,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Initialize a StorageProviderLogViewAdaptor class
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.LastConfirmedView">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.GetConfirmedVersion">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.InitializeConfirmedView(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.MakeSubmissionEntry(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.WriteAsync">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateStateStorageFailed">
            <summary>
            Describes a connection issue that occurred when updating the primary storage.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateStateStorageFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.ReadFromStateStorageFailed">
            <summary>
            Describes a connection issue that occurred when reading from the primary storage.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.ReadFromStateStorageFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateNotificationMessage">
            <summary>
            A notification message sent to remote instances after updating this grain in storage.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateNotificationMessage.Version">
            <inheritdoc/>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateNotificationMessage.Origin">
            <summary> The cluster that performed the update </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateNotificationMessage.Updates">
            <summary> The list of updates that were applied </summary>
        </member>
        <member name="P:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateNotificationMessage.ETag">
            <summary> The e-tag of the storage after applying the updates</summary>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.UpdateNotificationMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.Merge(Orleans.EventSourcing.Common.INotificationMessage,Orleans.EventSourcing.Common.INotificationMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.OnNotificationReceived(Orleans.EventSourcing.Common.INotificationMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Orleans.EventSourcing.StateStorage.LogViewAdaptor`2.ProcessNotifications">
            <inheritdoc/>
        </member>
        <member name="T:Orleans.EventSourcing.JournaledGrain`1">
            <summary>
            A base class for log-consistent grains using standard event-sourcing terminology.
            All operations are reentrancy-safe.
            <typeparam name="TGrainState">The type for the grain state, i.e. the aggregate view of the event log.</typeparam>
            </summary>
        </member>
        <member name="T:Orleans.EventSourcing.JournaledGrain`2">
            <summary>
            A base class for log-consistent grains using standard event-sourcing terminology.
            All operations are reentrancy-safe.
            <typeparam name="TGrainState">The type for the grain state, i.e. the aggregate view of the event log.</typeparam>
            <typeparam name="TEventBase">The common base class for the events</typeparam>
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.RaiseEvent``1(``0)">
            <summary>
            Raise an event.
            </summary>
            <param name="event">Event to raise</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.RaiseEvents``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Raise multiple events, as an atomic sequence.
            </summary>
            <param name="events">Events to raise</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.RaiseConditionalEvent``1(``0)">
            <summary>
            Raise an event conditionally. 
            Succeeds only if there are no conflicts, that is, no other events were raised in the meantime.
            </summary>
            <param name="event">Event to raise</param>
            <returns>true if successful, false if there was a conflict.</returns>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.RaiseConditionalEvents``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Raise multiple events, as an atomic sequence, conditionally. 
            Succeeds only if there are no conflicts, that is, no other events were raised in the meantime.
            </summary>
            <param name="events">Events to raise</param>
            <returns>true if successful, false if there was a conflict.</returns>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.State">
            <summary>
            The current confirmed state. 
            Includes only confirmed events.
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.Version">
            <summary>
            The version of the current confirmed state. 
            Equals the total number of confirmed events.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.OnTentativeStateChanged">
            <summary>
            Called whenever the tentative state may have changed due to local or remote events.
            <para>Override this to react to changes of the state.</para>
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.TentativeState">
            <summary>
            The current tentative state.
            Includes both confirmed and unconfirmed events.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.OnStateChanged">
            <summary>
            Called after the confirmed state may have changed (i.e. the confirmed version number is larger).
            <para>Override this to react to changes of the confirmed state.</para>
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.ConfirmEvents">
            <summary>
            Waits until all previously raised events have been confirmed. 
            <para>await this after raising one or more events, to ensure events are persisted before proceeding, or to guarantee strong consistency (linearizability) even if there are multiple instances of this grain</para>
            </summary>
            <returns>a task that completes once the events have been confirmed.</returns>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.RefreshNow">
            <summary>
            Retrieves the latest state now, and confirms all previously raised events. 
            Effectively, this enforces synchronization with the global state.
            <para>Await this before reading the state to ensure strong consistency (linearizability) even if there are multiple instances of this grain</para>
            </summary>
            <returns>a task that completes once the log has been refreshed and the events have been confirmed.</returns>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.UnconfirmedEvents">
            <summary>
            Returns the current queue of unconfirmed events.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.OnActivateAsync">
            <summary>
            By default, upon activation, the journaled grain waits until it has loaded the latest
            view from storage. Subclasses can override this behavior,
            and skip the wait if desired.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.RetrieveConfirmedEvents(System.Int32,System.Int32)">
            <summary>
            Retrieves a segment of the confirmed event sequence, possibly from storage. 
            Throws <see cref="T:System.NotSupportedException"/> if the events are not available to read.
            Whether events are available, and for how long, depends on the providers used and how they are configured.
            </summary>
            <param name="fromVersion">the position of the event sequence from which to start</param>
            <param name="toVersion">the position of the event sequence on which to end</param>
            <returns>a task which returns the sequence of events between the two versions</returns>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.OnConnectionIssue(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            Called when the underlying persistence or replication protocol is running into some sort of connection trouble.
            <para>Override this to monitor the health of the log-consistency protocol and/or
            to customize retry delays.
            Any exceptions thrown are caught and logged by the <see cref="T:Orleans.LogConsistency.ILogConsistencyProvider"/>.</para>
            </summary>
            <returns>The time to wait before retrying</returns>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.OnConnectionIssueResolved(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            Called when a previously reported connection issue has been resolved.
            <para>Override this to monitor the health of the log-consistency protocol. 
            Any exceptions thrown are caught and logged by the <see cref="T:Orleans.LogConsistency.ILogConsistencyProvider"/>.</para>
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.UnresolvedConnectionIssues">
            <inheritdoc cref="P:Orleans.LogConsistency.ILogConsistencyDiagnostics.UnresolvedConnectionIssues"/>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.EnableStatsCollection">
            <inheritdoc cref="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.EnableStatsCollection"/>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.DisableStatsCollection">
            <inheritdoc cref="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.DisableStatsCollection"/>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.GetStats">
            <inheritdoc cref="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.GetStats"/>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.TransitionState(`0,`1)">
            <summary>
            Defines how to apply events to the state. Unless it is overridden in the subclass, it calls
            a dynamic "Apply" function on the state, with the event as a parameter.
            All exceptions thrown by this method are caught and logged by the log view provider.
            <para>Override this to customize how to transition the state for a given event.</para>
            </summary>
            <param name="state"></param>
            <param name="event"></param>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.LogViewAdaptor">
            <summary>
            Adaptor for log consistency protocol.
            Is installed by the log-consistency provider.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#LogConsistency#ILogConsistentGrain#InstallAdaptor(Orleans.LogConsistency.ILogViewAdaptorFactory,System.Object,System.String,Orleans.Storage.IStorageProvider,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Called right after grain is constructed, to install the adaptor.
            The log-consistency provider contains a factory method that constructs the adaptor with chosen types for this grain
            </summary>
        </member>
        <member name="P:Orleans.EventSourcing.JournaledGrain`2.Orleans#LogConsistency#ILogConsistentGrain#DefaultAdaptorFactory">
            <summary>
            If there is no log-consistency provider specified, store versioned state using default storage provider
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#LogConsistency#ILogViewAdaptorHost{TGrainState,TEventBase}#UpdateView(`0,`1)">
            <summary>
            called by adaptor to update the view when entries are appended.
            </summary>
            <param name="view">log view</param>
            <param name="entry">log entry</param>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#MultiCluster#ILogConsistencyProtocolParticipant#PreActivateProtocolParticipant">
            <summary>
            Notify log view adaptor of activation (called before user-level OnActivate)
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#MultiCluster#ILogConsistencyProtocolParticipant#PostActivateProtocolParticipant">
            <summary>
            Notify log view adaptor of activation (called after user-level OnActivate)
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#MultiCluster#ILogConsistencyProtocolParticipant#DeactivateProtocolParticipant">
            <summary>
            Notify log view adaptor of deactivation
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#MultiCluster#ILogConsistencyProtocolParticipant#OnProtocolMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>
            Receive a protocol message from other clusters, passed on to log view adaptor.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#MultiCluster#ILogConsistencyProtocolParticipant#OnMultiClusterConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Receive a configuration change, pass on to log view adaptor.
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#LogConsistency#ILogViewAdaptorHost{TGrainState,TEventBase}#OnViewChanged(System.Boolean,System.Boolean)">
            <summary>
            called by adaptor on state change. 
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#LogConsistency#IConnectionIssueListener#OnConnectionIssue(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            called by adaptor on connection issues. 
            </summary>
        </member>
        <member name="M:Orleans.EventSourcing.JournaledGrain`2.Orleans#LogConsistency#IConnectionIssueListener#OnConnectionIssueResolved(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            called by adaptor when a connection issue is resolved. 
            </summary>
        </member>
    </members>
</doc>
